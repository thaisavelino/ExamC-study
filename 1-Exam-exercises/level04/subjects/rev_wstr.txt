/* ***********************************************************
Assignment name  : rev_wstr
Expected files   : rev_wstr.c
Allowed functions: write, malloc, free
--------------------------------------------------------------------------------

Write a program that takes a string as a parameter, and prints its words in
reverse order.

A "word" is a part of the string bounded by spaces and/or tabs, or the
begin/end of the string.

If the number of parameters is different from 1, the program will display
'\n'.

In the parameters that are going to be tested, there won't be any "additional"
spaces (meaning that there won't be additionnal spaces at the beginning or at
the end of the string, and words will always be separated by exactly one space).

Examples:

$> ./rev_wstr "le temps du mepris precede celui de l'indifference" | cat -e
l'indifference de celui precede mepris du temps le$
$> ./rev_wstr "abcdefghijklm"
abcdefghijklm
$> ./rev_wstr "il contempla le mont" | cat -e
mont le contempla il$
$> ./rev_wstr | cat -e
$
$>

*************************************************************** */

#include <unistd.h>
#include <stdlib.h>

int		is_space(char c)
{
	if ((c >= 9 && c <= 13) || c == 32)
		return (1);
	else
		return (0);
}

void	print_str(char *str, int beg, int end)
{
	while (str && beg <= end)
	{
		write(1, &str[beg], 1);
		beg++;
	}
}

int		ft_strlen(char *str)
{
	int len;

	len = 0;
	while (str[len] != '\0')
		len++;
	return (len);
}

void	rev_wstr(char *str)
{
	int end;
	int beg;
	int word;

	end = ft_strlen(str) - 1;
	beg = 0;
	word = 0;
	while (end >= 0)
	{
		if (is_space(str[end]))
			end--;
		beg = end;
		while (beg >= 0 && (!(is_space(str[beg]))))
			beg--;
		(word > 0) ? write(1, " ", 1) : 0;
		print_str(str, beg + 1, end);
		word++;
		end = beg;
	}
}

int		main(int argc, char **argv)
{
	if (argc == 2)
		rev_wstr(argv[1]);
	write(1, "\n", 1);
	return (0);
}
